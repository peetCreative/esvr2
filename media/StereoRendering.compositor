abstract target main_stereo_render
{
	//Eye render
	pass render_scene
	{
		load
		{
            all				clear
			clear_colour	0.2 0.4 0.6 1
		}
		store
		{
			depth	dont_care
			stencil	dont_care
		}

		//0x01234567
		identifier 19088743

		overlays	off

		cull_camera VrCullCamera

		//shadows		ShadowMapDebuggingShadowNode

		instanced_stereo true
		viewport 0 0.0 0.0 0.5 1.0
		viewport 1 0.5 0.0 0.5 1.0
	}

	//Render overlays last on the entire screen
	pass render_scene
	{
		rq_first	254
		rq_last		255

		overlays	on
	}
}

compositor_node InstancedStereoNode
{
	in 0 stereo_output

	target stereo_output : main_stereo_render	{}
}

compositor_node StereoMirrorWindowNode
{
	in 0 rt_renderwindow
	in 1 stereo_results

	target rt_renderwindow
	{
		//Eye render
		pass render_quad
		{
			load { all dont_care }
			store
			{
				depth	dont_care
				stencil	dont_care
			}
			material Ogre/Copy/4xFP32
			input 0 stereo_results
		}
	}
}

workspace InstancedStereoWorkspace
{
	connect_output InstancedStereoNode 0
}

workspace StereoMirrorWindowWorkspace
{
	connect_external 0 StereoMirrorWindowNode 0
	connect_external 1 StereoMirrorWindowNode 1
}

compositor_node LaparoscopeVideoNode
{
    //maybe we need this if we have asyncronous videoloading
    //in 0 rt_video_texture
    //TODO: make size variable
    in 0 rt_laparoscope_view_texture
	texture video_texture 960 540 PFG_RGBA8_UNORM keep_content

    target rt_laparoscope_view_texture
    {
		//copy video_texture to rt_video_texture
		pass render_quad
		{
			material Ogre/Copy/4xFP32
			input 0 video_texture
		}
		//Left Eye render
		pass render_scene
		{
			//Get executed in all eyes
			overlays	off
		}

    }
}

workspace LaparoscopeViewWorkspace
{
    connect_output LaparoscopeVideoNode 0
}

compositor_node DebugNode
{
    in 0 rt_debug

    target rt_debug
    {
        pass render_scene
        {
            load
            {
                all				clear
                clear_colour	0.2 0.4 0.6 1
            }
            store
            {
                depth	dont_care
                stencil	dont_care
            }
        }
    }
}

workspace DebugWorksapce
{
    connect_output DebugNode 0
}

compositor_node StereoRenderingNode
{
	in 0 rt_renderwindow

	target rt_renderwindow
	{
		pass clear
		{
			//Get executed on the first eye
			execution_mask			0x01
			//Don't be affected by the modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			colour_value			0.2 0.4 0.6 1

			// Only write to the MSAA surface (don't resolve!)
			// because overlays due to a legacy problem break the pass
			// thus if we resolve now, we'll resolve twice
			store
			{
				colour	store
				depth	store
				stencil	store
			}
		}

		//Eye render
		pass render_scene
		{
			//Get executed in all eyes
			execution_mask			0xff
			//Be affected by the modifier, so we render just to a portion of the screen.
			viewport_modifier_mask	0xff

			overlays	off

			// Only write to the MSAA surface (don't resolve!) (see clear pass)
			store
			{
				colour	store
				depth	store
				stencil	store
			}
		}

		//Render overlays last on the entire screen
		pass render_scene
		{
			//Get executed in the second eye
			execution_mask			0x02
			//Don't be affected by the modifier, apply to the whole screen
			viewport_modifier_mask	0x00

			rq_first	254
			rq_last		255

			overlays	on
		}
	}
}

workspace StereoRenderingWorkspace
{
	connect_output StereoRenderingNode 0
}
